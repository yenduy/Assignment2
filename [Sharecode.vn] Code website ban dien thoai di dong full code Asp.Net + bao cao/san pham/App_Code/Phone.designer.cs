#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[System.Data.Linq.Mapping.DatabaseAttribute(Name="Products")]
public partial class PhoneDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertBanner(Banner instance);
  partial void UpdateBanner(Banner instance);
  partial void DeleteBanner(Banner instance);
  partial void InsertPromotion(Promotion instance);
  partial void UpdatePromotion(Promotion instance);
  partial void DeletePromotion(Promotion instance);
  partial void InsertCustomer(Customer instance);
  partial void UpdateCustomer(Customer instance);
  partial void DeleteCustomer(Customer instance);
  partial void InsertFirm(Firm instance);
  partial void UpdateFirm(Firm instance);
  partial void DeleteFirm(Firm instance);
  partial void InsertOrder_Detail(Order_Detail instance);
  partial void UpdateOrder_Detail(Order_Detail instance);
  partial void DeleteOrder_Detail(Order_Detail instance);
  partial void InsertOrder(Order instance);
  partial void UpdateOrder(Order instance);
  partial void DeleteOrder(Order instance);
  partial void InsertPhone(Phone instance);
  partial void UpdatePhone(Phone instance);
  partial void DeletePhone(Phone instance);
  partial void InsertPoll(Poll instance);
  partial void UpdatePoll(Poll instance);
  partial void DeletePoll(Poll instance);
  #endregion
	
	public PhoneDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ProductsConnectionString1"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public PhoneDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public PhoneDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public PhoneDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public PhoneDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Banner> Banners
	{
		get
		{
			return this.GetTable<Banner>();
		}
	}
	
	public System.Data.Linq.Table<Promotion> Promotions
	{
		get
		{
			return this.GetTable<Promotion>();
		}
	}
	
	public System.Data.Linq.Table<Customer> Customers
	{
		get
		{
			return this.GetTable<Customer>();
		}
	}
	
	public System.Data.Linq.Table<Firm> Firms
	{
		get
		{
			return this.GetTable<Firm>();
		}
	}
	
	public System.Data.Linq.Table<Order_Detail> Order_Details
	{
		get
		{
			return this.GetTable<Order_Detail>();
		}
	}
	
	public System.Data.Linq.Table<Order> Orders
	{
		get
		{
			return this.GetTable<Order>();
		}
	}
	
	public System.Data.Linq.Table<Phone> Phones
	{
		get
		{
			return this.GetTable<Phone>();
		}
	}
	
	public System.Data.Linq.Table<Poll> Polls
	{
		get
		{
			return this.GetTable<Poll>();
		}
	}
	
	[Function(Name="dbo.AdvancedSearch")]
	public ISingleResult<AdvancedSearchResult> AdvancedSearch([Parameter(Name="Design", DbType="NVarChar(450)")] string design, [Parameter(Name="Memory", DbType="NVarChar(500)")] string memory, [Parameter(Name="WebConnection", DbType="NVarChar(400)")] string webConnection, [Parameter(Name="Browsers", DbType="NVarChar(250)")] string browsers, [Parameter(Name="Camera", DbType="NVarChar(500)")] string camera, [Parameter(Name="MusicPlayer", DbType="NVarChar(250)")] string musicPlayer, [Parameter(Name="MoviesPlayer", DbType="NVarChar(250)")] string moviesPlayer, [Parameter(DbType="Int")] System.Nullable<int> currpage, [Parameter(DbType="Int")] System.Nullable<int> recordperpage, [Parameter(DbType="Int")] ref System.Nullable<int> totalrecord)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), design, memory, webConnection, browsers, camera, musicPlayer, moviesPlayer, currpage, recordperpage, totalrecord);
		totalrecord = ((System.Nullable<int>)(result.GetParameterValue(9)));
		return ((ISingleResult<AdvancedSearchResult>)(result.ReturnValue));
	}
	
	[Function(Name="dbo.UpdateQuantityProduct")]
	public int UpdateQuantityProduct([Parameter(Name="PhoneID", DbType="VarChar(8)")] string phoneID, [Parameter(Name="QuantitySale", DbType="Int")] System.Nullable<int> quantitySale)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), phoneID, quantitySale);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.DeleteBanner")]
	public int DeleteBanner([Parameter(Name="BannerID", DbType="VarChar(5)")] string bannerID)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), bannerID);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.DeleteCustomer")]
	public int DeleteCustomer([Parameter(Name="CusID", DbType="VarChar(10)")] string cusID)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), cusID);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.DeleteFirm")]
	public int DeleteFirm([Parameter(Name="FirmID", DbType="VarChar(3)")] string firmID)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), firmID);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.DeleteOrder")]
	public int DeleteOrder([Parameter(Name="OrderID", DbType="NChar(10)")] string orderID)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), orderID);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.DeletePhone")]
	public int DeletePhone([Parameter(Name="PhoneID", DbType="VarChar(20)")] string phoneID)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), phoneID);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.DeletePoll")]
	public int DeletePoll([Parameter(Name="PollID", DbType="NChar(10)")] string pollID)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pollID);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.DeletePromotion")]
	public int DeletePromotion([Parameter(Name="PromotionID", DbType="VarChar(10)")] string promotionID)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), promotionID);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.DisplayBanner")]
	public ISingleResult<DisplayBannerResult> DisplayBanner([Parameter(Name="Link", DbType="VarChar(255)")] string link, [Parameter(DbType="Int")] System.Nullable<int> currpage, [Parameter(DbType="Int")] System.Nullable<int> recordperpage, [Parameter(DbType="Int")] ref System.Nullable<int> totalrecord)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), link, currpage, recordperpage, totalrecord);
		totalrecord = ((System.Nullable<int>)(result.GetParameterValue(3)));
		return ((ISingleResult<DisplayBannerResult>)(result.ReturnValue));
	}
	
	[Function(Name="dbo.DisPlayFavouriteProduct")]
	public ISingleResult<DisPlayFavouriteProductResult> DisPlayFavouriteProduct()
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		return ((ISingleResult<DisPlayFavouriteProductResult>)(result.ReturnValue));
	}
	
	[Function(Name="dbo.DisplaymMarketableProduct")]
	public ISingleResult<DisplaymMarketableProductResult> DisplaymMarketableProduct()
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		return ((ISingleResult<DisplaymMarketableProductResult>)(result.ReturnValue));
	}
	
	[Function(Name="dbo.DisplayNewProduct")]
	public ISingleResult<DisplayNewProductResult> DisplayNewProduct()
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		return ((ISingleResult<DisplayNewProductResult>)(result.ReturnValue));
	}
	
	[Function(Name="dbo.DisplayOrderbyDate")]
	public ISingleResult<DisplayOrderbyDateResult> DisplayOrderbyDate([Parameter(Name="OrderDate", DbType="DateTime")] System.Nullable<System.DateTime> orderDate, [Parameter(DbType="Int")] System.Nullable<int> currpage, [Parameter(DbType="Int")] System.Nullable<int> recordperpage, [Parameter(DbType="Int")] ref System.Nullable<int> totalrecord)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), orderDate, currpage, recordperpage, totalrecord);
		totalrecord = ((System.Nullable<int>)(result.GetParameterValue(3)));
		return ((ISingleResult<DisplayOrderbyDateResult>)(result.ReturnValue));
	}
	
	[Function(Name="dbo.DisplayPollperPhone")]
	public ISingleResult<DisplayPollperPhoneResult> DisplayPollperPhone([Parameter(Name="PhoneID", DbType="VarChar(6)")] string phoneID, [Parameter(DbType="Int")] System.Nullable<int> currpage, [Parameter(DbType="Int")] System.Nullable<int> recordperpage, [Parameter(DbType="Int")] ref System.Nullable<int> totalrecord)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), phoneID, currpage, recordperpage, totalrecord);
		totalrecord = ((System.Nullable<int>)(result.GetParameterValue(3)));
		return ((ISingleResult<DisplayPollperPhoneResult>)(result.ReturnValue));
	}
	
	[Function(Name="dbo.DisplayProductDetail")]
	public ISingleResult<DisplayProductDetailResult> DisplayProductDetail([Parameter(Name="PhoneName", DbType="VarChar(6)")] string phoneName, [Parameter(DbType="VarChar(50)")] ref string currstatus)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), phoneName, currstatus);
		currstatus = ((string)(result.GetParameterValue(1)));
		return ((ISingleResult<DisplayProductDetailResult>)(result.ReturnValue));
	}
	
	[Function(Name="dbo.GetSameProducts")]
	public ISingleResult<GetSameProductsResult> GetSameProducts([Parameter(Name="FirmName", DbType="NVarChar(50)")] string firmName, [Parameter(Name="PhoneName", DbType="NVarChar(100)")] string phoneName, [Parameter(DbType="Int")] System.Nullable<int> currpage, [Parameter(DbType="Int")] System.Nullable<int> recordperpage)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), firmName, phoneName, currpage, recordperpage);
		return ((ISingleResult<GetSameProductsResult>)(result.ReturnValue));
	}
	
	[Function(Name="dbo.IncreaseBannerID")]
	public int IncreaseBannerID([Parameter(Name="BannerID", DbType="VarChar(10)")] ref string bannerID)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), bannerID);
		bannerID = ((string)(result.GetParameterValue(0)));
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.IncreaseCusID")]
	public int IncreaseCusID([Parameter(Name="CusID", DbType="VarChar(10)")] ref string cusID)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), cusID);
		cusID = ((string)(result.GetParameterValue(0)));
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.IncreaseFirmID")]
	public int IncreaseFirmID([Parameter(Name="FirmID", DbType="VarChar(3)")] ref string firmID)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), firmID);
		firmID = ((string)(result.GetParameterValue(0)));
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.IncreaseOrderID")]
	public int IncreaseOrderID([Parameter(Name="OrderID", DbType="VarChar(10)")] ref string orderID)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), orderID);
		orderID = ((string)(result.GetParameterValue(0)));
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.IncreasePhoneID")]
	public int IncreasePhoneID([Parameter(Name="FirmID", DbType="VarChar(3)")] string firmID, [Parameter(Name="PhoneID", DbType="VarChar(6)")] ref string phoneID)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), firmID, phoneID);
		phoneID = ((string)(result.GetParameterValue(1)));
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.IncreasePollID")]
	public int IncreasePollID([Parameter(Name="PollID", DbType="VarChar(10)")] ref string pollID)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pollID);
		pollID = ((string)(result.GetParameterValue(0)));
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.IncreasePromotionID")]
	public int IncreasePromotionID([Parameter(Name="PromotionID", DbType="VarChar(10)")] ref string promotionID)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), promotionID);
		promotionID = ((string)(result.GetParameterValue(0)));
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.InsertBanner")]
	public int InsertBanner([Parameter(Name="BannerName", DbType="NVarChar(100)")] string bannerName, [Parameter(Name="Picture", DbType="VarChar(255)")] string picture, [Parameter(Name="Link", DbType="VarChar(255)")] string link, [Parameter(Name="PostDate", DbType="DateTime")] System.Nullable<System.DateTime> postDate, [Parameter(Name="Location", DbType="VarChar(50)")] string location, [Parameter(Name="Status", DbType="Int")] System.Nullable<int> status)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), bannerName, picture, link, postDate, location, status);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.InsertCustomer")]
	public int InsertCustomer([Parameter(Name="CusName", DbType="NVarChar(50)")] string cusName, [Parameter(Name="Address", DbType="NVarChar(250)")] string address, [Parameter(Name="Email", DbType="VarChar(150)")] string email, [Parameter(Name="Number", DbType="VarChar(20)")] string number)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), cusName, address, email, number);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.InsertFirm")]
	public int InsertFirm([Parameter(Name="FirmName", DbType="NVarChar(50)")] string firmName, [Parameter(Name="Picture", DbType="VarChar(255)")] string picture, [Parameter(Name="Description", DbType="NVarChar(500)")] string description, [Parameter(Name="Status", DbType="Int")] System.Nullable<int> status)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), firmName, picture, description, status);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.InsertOrder")]
	public int InsertOrder([Parameter(Name="Name", DbType="NVarChar(50)")] string name, [Parameter(Name="Email", DbType="VarChar(150)")] string email, [Parameter(Name="Number", DbType="VarChar(20)")] string number, [Parameter(Name="OrderDate", DbType="DateTime")] System.Nullable<System.DateTime> orderDate, [Parameter(Name="RequireDate", DbType="DateTime")] System.Nullable<System.DateTime> requireDate, [Parameter(Name="ShippedDate", DbType="DateTime")] System.Nullable<System.DateTime> shippedDate, [Parameter(Name="ShipAddress", DbType="NVarChar(200)")] string shipAddress, [Parameter(DbType="Float")] System.Nullable<double> total)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name, email, number, orderDate, requireDate, shippedDate, shipAddress, total);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.InsertOrder_Detail")]
	public int InsertOrder_Detail([Parameter(Name="OrderID", DbType="NChar(10)")] string orderID, [Parameter(Name="PhoneID", DbType="VarChar(8)")] string phoneID, [Parameter(Name="Quantity", DbType="Int")] System.Nullable<int> quantity, [Parameter(Name="SalePrice", DbType="Float")] System.Nullable<double> salePrice)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), orderID, phoneID, quantity, salePrice);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.InsertPhone")]
	public int InsertPhone(
				[Parameter(Name="PhoneID", DbType="VarChar(8)")] string phoneID, 
				[Parameter(Name="PhoneName", DbType="NVarChar(100)")] string phoneName, 
				[Parameter(Name="FirmName", DbType="NVarChar(50)")] string firmName, 
				[Parameter(Name="FirmID", DbType="VarChar(3)")] string firmID, 
				[Parameter(Name="Picture", DbType="VarChar(255)")] string picture, 
				[Parameter(Name="ImportDate", DbType="DateTime")] System.Nullable<System.DateTime> importDate, 
				[Parameter(Name="Quantity", DbType="Int")] System.Nullable<int> quantity, 
				[Parameter(Name="Price", DbType="Float")] System.Nullable<double> price, 
				[Parameter(Name="Warranty", DbType="NVarChar(50)")] string warranty, 
				[Parameter(Name="FamousInfo", DbType="NVarChar(MAX)")] string famousInfo, 
				[Parameter(Name="Status", DbType="Int")] System.Nullable<int> status, 
				[Parameter(Name="Design", DbType="NVarChar(1000)")] string design, 
				[Parameter(Name="Languages", DbType="NVarChar(250)")] string languages, 
				[Parameter(Name="Sound", DbType="NVarChar(500)")] string sound, 
				[Parameter(Name="Memory", DbType="NVarChar(500)")] string memory, 
				[Parameter(Name="WebConnection", DbType="NVarChar(1000)")] string webConnection, 
				[Parameter(Name="Browser", DbType="NVarChar(400)")] string browser, 
				[Parameter(Name="Camera", DbType="NVarChar(500)")] string camera, 
				[Parameter(Name="Music", DbType="NVarChar(500)")] string music, 
				[Parameter(Name="Movies", DbType="NVarChar(500)")] string movies, 
				[Parameter(Name="Game", DbType="NVarChar(350)")] string game, 
				[Parameter(Name="Orther", DbType="NVarChar(4000)")] string orther, 
				[Parameter(Name="Battery", DbType="NVarChar(500)")] string battery)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), phoneID, phoneName, firmName, firmID, picture, importDate, quantity, price, warranty, famousInfo, status, design, languages, sound, memory, webConnection, browser, camera, music, movies, game, orther, battery);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.InsertPoll")]
	public int InsertPoll([Parameter(Name="PhoneID", DbType="VarChar(8)")] string phoneID, [Parameter(Name="Commentator", DbType="NVarChar(50)")] string commentator, [Parameter(Name="Email", DbType="VarChar(250)")] string email, [Parameter(Name="PostDate", DbType="DateTime")] System.Nullable<System.DateTime> postDate, [Parameter(Name="Comments", DbType="NVarChar(MAX)")] string comments, [Parameter(Name="VoteCount", DbType="Int")] System.Nullable<int> voteCount)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), phoneID, commentator, email, postDate, comments, voteCount);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.InsertPromotion")]
	public int InsertPromotion([Parameter(Name="PhoneID", DbType="VarChar(5)")] string phoneID, [Parameter(Name="Percentage", DbType="Int")] System.Nullable<int> percentage)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), phoneID, percentage);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.SearchByName")]
	public ISingleResult<SearchByNameResult> SearchByName([Parameter(Name="Name", DbType="NVarChar(100)")] string name, [Parameter(DbType="Int")] System.Nullable<int> currpage, [Parameter(DbType="Int")] System.Nullable<int> recordperpage, [Parameter(DbType="Int")] ref System.Nullable<int> totalrecord)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name, currpage, recordperpage, totalrecord);
		totalrecord = ((System.Nullable<int>)(result.GetParameterValue(3)));
		return ((ISingleResult<SearchByNameResult>)(result.ReturnValue));
	}
	
	[Function(Name="dbo.SearchByPrice")]
	public ISingleResult<SearchByPriceResult> SearchByPrice([Parameter(Name="Min", DbType="Float")] System.Nullable<double> min, [Parameter(Name="Max", DbType="Float")] System.Nullable<double> max, [Parameter(DbType="Int")] System.Nullable<int> currpage, [Parameter(DbType="Int")] System.Nullable<int> recordperpage)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), min, max, currpage, recordperpage);
		return ((ISingleResult<SearchByPriceResult>)(result.ReturnValue));
	}
	
	[Function(Name="dbo.SearchCustomerByAddress")]
	public ISingleResult<SearchCustomerByAddressResult> SearchCustomerByAddress([Parameter(Name="Address", DbType="NVarChar(250)")] string address)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), address);
		return ((ISingleResult<SearchCustomerByAddressResult>)(result.ReturnValue));
	}
	
	[Function(Name="dbo.SearchCustomerByName")]
	public ISingleResult<SearchCustomerByNameResult> SearchCustomerByName([Parameter(Name="CusName", DbType="NVarChar(50)")] string cusName)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), cusName);
		return ((ISingleResult<SearchCustomerByNameResult>)(result.ReturnValue));
	}
	
	[Function(Name="dbo.SearchFirmByName")]
	public ISingleResult<SearchFirmByNameResult> SearchFirmByName([Parameter(Name="Name", DbType="NVarChar(50)")] string name)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name);
		return ((ISingleResult<SearchFirmByNameResult>)(result.ReturnValue));
	}
	
	[Function(Name="dbo.UpdateBanner")]
	public int UpdateBanner([Parameter(Name="BannerID", DbType="VarChar(5)")] string bannerID, [Parameter(Name="BannerName", DbType="NVarChar(100)")] string bannerName, [Parameter(Name="Picture", DbType="VarChar(255)")] string picture, [Parameter(Name="Link", DbType="VarChar(255)")] string link, [Parameter(Name="PostDate", DbType="DateTime")] System.Nullable<System.DateTime> postDate, [Parameter(Name="Location", DbType="VarChar(50)")] string location, [Parameter(Name="Status", DbType="Int")] System.Nullable<int> status)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), bannerID, bannerName, picture, link, postDate, location, status);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.UpdateCustomer")]
	public int UpdateCustomer([Parameter(Name="CusID", DbType="VarChar(10)")] string cusID, [Parameter(Name="CusName", DbType="NVarChar(50)")] string cusName, [Parameter(Name="Address", DbType="NVarChar(250)")] string address, [Parameter(Name="Email", DbType="VarChar(150)")] string email, [Parameter(Name="Number", DbType="VarChar(20)")] string number)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), cusID, cusName, address, email, number);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.UpdateFirm")]
	public int UpdateFirm([Parameter(Name="FirmID", DbType="VarChar(20)")] string firmID, [Parameter(Name="FirmName", DbType="NVarChar(50)")] string firmName, [Parameter(Name="Picture", DbType="VarChar(255)")] string picture, [Parameter(Name="Description", DbType="NText")] string description, [Parameter(Name="Status", DbType="Int")] System.Nullable<int> status)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), firmID, firmName, picture, description, status);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.UpdateOrder")]
	public int UpdateOrder([Parameter(Name="OrderID", DbType="NChar(10)")] string orderID, [Parameter(Name="CusID", DbType="VarChar(10)")] string cusID, [Parameter(Name="OrderDate", DbType="DateTime")] System.Nullable<System.DateTime> orderDate, [Parameter(Name="RequireDate", DbType="DateTime")] System.Nullable<System.DateTime> requireDate, [Parameter(Name="ShippedDate", DbType="DateTime")] System.Nullable<System.DateTime> shippedDate, [Parameter(Name="ShipAddress", DbType="NVarChar(200)")] string shipAddress, [Parameter(Name="Status", DbType="Int")] System.Nullable<int> status, [Parameter(Name="Note", DbType="NVarChar(500)")] string note)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), orderID, cusID, orderDate, requireDate, shippedDate, shipAddress, status, note);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.UpdateOrder_Detail")]
	public int UpdateOrder_Detail([Parameter(Name="OrderID", DbType="NChar(10)")] string orderID, [Parameter(Name="PhoneID", DbType="NChar(10)")] string phoneID, [Parameter(Name="Quantity", DbType="Int")] System.Nullable<int> quantity, [Parameter(Name="SalePrice", DbType="Float")] System.Nullable<double> salePrice)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), orderID, phoneID, quantity, salePrice);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.UpdatePhone")]
	public int UpdatePhone(
				[Parameter(Name="PhoneID", DbType="VarChar(5)")] string phoneID, 
				[Parameter(Name="PhoneName", DbType="NVarChar(100)")] string phoneName, 
				[Parameter(Name="FirmID", DbType="VarChar(3)")] string firmID, 
				[Parameter(Name="Picture", DbType="VarChar(255)")] string picture, 
				[Parameter(Name="PostDate", DbType="DateTime")] System.Nullable<System.DateTime> postDate, 
				[Parameter(Name="Quantity", DbType="Int")] System.Nullable<int> quantity, 
				[Parameter(Name="Price", DbType="Float")] System.Nullable<double> price, 
				[Parameter(Name="Warranty", DbType="Int")] System.Nullable<int> warranty, 
				[Parameter(Name="FamousInfo", DbType="NVarChar(MAX)")] string famousInfo, 
				[Parameter(Name="Status", DbType="NVarChar(20)")] string status, 
				[Parameter(Name="Design", DbType="NVarChar(250)")] string design, 
				[Parameter(Name="Languages", DbType="NVarChar(200)")] string languages, 
				[Parameter(Name="Sound", DbType="NVarChar(500)")] string sound, 
				[Parameter(Name="Memory", DbType="NVarChar(500)")] string memory, 
				[Parameter(Name="WebConnection", DbType="NVarChar(400)")] string webConnection, 
				[Parameter(Name="Browser", DbType="NVarChar(250)")] string browser, 
				[Parameter(Name="Camera", DbType="NVarChar(250)")] string camera, 
				[Parameter(Name="Music", DbType="NVarChar(250)")] string music, 
				[Parameter(Name="Movies", DbType="NVarChar(250)")] string movies, 
				[Parameter(Name="Game", DbType="NVarChar(250)")] string game, 
				[Parameter(Name="Orther", DbType="NVarChar(4000)")] string orther, 
				[Parameter(Name="Battery", DbType="NVarChar(500)")] string battery)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), phoneID, phoneName, firmID, picture, postDate, quantity, price, warranty, famousInfo, status, design, languages, sound, memory, webConnection, browser, camera, music, movies, game, orther, battery);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.UpdatePoll")]
	public int UpdatePoll([Parameter(Name="PollID", DbType="NChar(10)")] string pollID, [Parameter(Name="PhoneID", DbType="NChar(10)")] string phoneID, [Parameter(Name="VoteCount", DbType="Int")] System.Nullable<int> voteCount, [Parameter(DbType="DateTime")] System.Nullable<System.DateTime> dateTime, [Parameter(DbType="NVarChar(MAX)")] string comment)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pollID, phoneID, voteCount, dateTime, comment);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.UpdatePromotion")]
	public int UpdatePromotion([Parameter(Name="PromotionID", DbType="VarChar(10)")] string promotionID, [Parameter(Name="PhoneID", DbType="VarChar(5)")] string phoneID, [Parameter(Name="Percentage", DbType="Int")] System.Nullable<int> percentage)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), promotionID, phoneID, percentage);
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.SearchByFirm")]
	public ISingleResult<SearchByFirmResult> SearchByFirm([Parameter(Name="FirmName", DbType="NVarChar(20)")] string firmName, [Parameter(DbType="Int")] System.Nullable<int> currpage, [Parameter(DbType="Int")] System.Nullable<int> recordperpage)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), firmName, currpage, recordperpage);
		return ((ISingleResult<SearchByFirmResult>)(result.ReturnValue));
	}
}

[Table(Name="dbo.Banners")]
public partial class Banner : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _BannerID;
	
	private string _BannerName;
	
	private string _Picture;
	
	private string _Link;
	
	private System.DateTime _PostDate;
	
	private string _Location;
	
	private System.Nullable<int> _Status;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBannerIDChanging(string value);
    partial void OnBannerIDChanged();
    partial void OnBannerNameChanging(string value);
    partial void OnBannerNameChanged();
    partial void OnPictureChanging(string value);
    partial void OnPictureChanged();
    partial void OnLinkChanging(string value);
    partial void OnLinkChanged();
    partial void OnPostDateChanging(System.DateTime value);
    partial void OnPostDateChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    #endregion
	
	public Banner()
	{
		OnCreated();
	}
	
	[Column(Storage="_BannerID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string BannerID
	{
		get
		{
			return this._BannerID;
		}
		set
		{
			if ((this._BannerID != value))
			{
				this.OnBannerIDChanging(value);
				this.SendPropertyChanging();
				this._BannerID = value;
				this.SendPropertyChanged("BannerID");
				this.OnBannerIDChanged();
			}
		}
	}
	
	[Column(Storage="_BannerName", DbType="NVarChar(100)")]
	public string BannerName
	{
		get
		{
			return this._BannerName;
		}
		set
		{
			if ((this._BannerName != value))
			{
				this.OnBannerNameChanging(value);
				this.SendPropertyChanging();
				this._BannerName = value;
				this.SendPropertyChanged("BannerName");
				this.OnBannerNameChanged();
			}
		}
	}
	
	[Column(Storage="_Picture", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
	public string Picture
	{
		get
		{
			return this._Picture;
		}
		set
		{
			if ((this._Picture != value))
			{
				this.OnPictureChanging(value);
				this.SendPropertyChanging();
				this._Picture = value;
				this.SendPropertyChanged("Picture");
				this.OnPictureChanged();
			}
		}
	}
	
	[Column(Storage="_Link", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
	public string Link
	{
		get
		{
			return this._Link;
		}
		set
		{
			if ((this._Link != value))
			{
				this.OnLinkChanging(value);
				this.SendPropertyChanging();
				this._Link = value;
				this.SendPropertyChanged("Link");
				this.OnLinkChanged();
			}
		}
	}
	
	[Column(Storage="_PostDate", DbType="DateTime NOT NULL")]
	public System.DateTime PostDate
	{
		get
		{
			return this._PostDate;
		}
		set
		{
			if ((this._PostDate != value))
			{
				this.OnPostDateChanging(value);
				this.SendPropertyChanging();
				this._PostDate = value;
				this.SendPropertyChanged("PostDate");
				this.OnPostDateChanged();
			}
		}
	}
	
	[Column(Storage="_Location", DbType="VarChar(50)")]
	public string Location
	{
		get
		{
			return this._Location;
		}
		set
		{
			if ((this._Location != value))
			{
				this.OnLocationChanging(value);
				this.SendPropertyChanging();
				this._Location = value;
				this.SendPropertyChanged("Location");
				this.OnLocationChanged();
			}
		}
	}
	
	[Column(Storage="_Status", DbType="Int")]
	public System.Nullable<int> Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Promotions")]
public partial class Promotion : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _PromotionID;
	
	private string _PhoneID;
	
	private int _Percentage;
	
	private EntityRef<Phone> _Phone;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPromotionIDChanging(string value);
    partial void OnPromotionIDChanged();
    partial void OnPhoneIDChanging(string value);
    partial void OnPhoneIDChanged();
    partial void OnPercentageChanging(int value);
    partial void OnPercentageChanged();
    #endregion
	
	public Promotion()
	{
		this._Phone = default(EntityRef<Phone>);
		OnCreated();
	}
	
	[Column(Storage="_PromotionID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string PromotionID
	{
		get
		{
			return this._PromotionID;
		}
		set
		{
			if ((this._PromotionID != value))
			{
				this.OnPromotionIDChanging(value);
				this.SendPropertyChanging();
				this._PromotionID = value;
				this.SendPropertyChanged("PromotionID");
				this.OnPromotionIDChanged();
			}
		}
	}
	
	[Column(Storage="_PhoneID", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
	public string PhoneID
	{
		get
		{
			return this._PhoneID;
		}
		set
		{
			if ((this._PhoneID != value))
			{
				if (this._Phone.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPhoneIDChanging(value);
				this.SendPropertyChanging();
				this._PhoneID = value;
				this.SendPropertyChanged("PhoneID");
				this.OnPhoneIDChanged();
			}
		}
	}
	
	[Column(Storage="_Percentage", DbType="Int NOT NULL")]
	public int Percentage
	{
		get
		{
			return this._Percentage;
		}
		set
		{
			if ((this._Percentage != value))
			{
				this.OnPercentageChanging(value);
				this.SendPropertyChanging();
				this._Percentage = value;
				this.SendPropertyChanged("Percentage");
				this.OnPercentageChanged();
			}
		}
	}
	
	[Association(Name="Phone_Promotion", Storage="_Phone", ThisKey="PhoneID", IsForeignKey=true)]
	public Phone Phone
	{
		get
		{
			return this._Phone.Entity;
		}
		set
		{
			Phone previousValue = this._Phone.Entity;
			if (((previousValue != value) 
						|| (this._Phone.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Phone.Entity = null;
					previousValue.Promotions.Remove(this);
				}
				this._Phone.Entity = value;
				if ((value != null))
				{
					value.Promotions.Add(this);
					this._PhoneID = value.PhoneID;
				}
				else
				{
					this._PhoneID = default(string);
				}
				this.SendPropertyChanged("Phone");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Customers")]
public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _CustomerID;
	
	private string _CustomerName;
	
	private string _Address;
	
	private string _Email;
	
	private string _Number;
	
	private EntitySet<Order> _Orders;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerIDChanging(string value);
    partial void OnCustomerIDChanged();
    partial void OnCustomerNameChanging(string value);
    partial void OnCustomerNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    #endregion
	
	public Customer()
	{
		this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
		OnCreated();
	}
	
	[Column(Storage="_CustomerID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string CustomerID
	{
		get
		{
			return this._CustomerID;
		}
		set
		{
			if ((this._CustomerID != value))
			{
				this.OnCustomerIDChanging(value);
				this.SendPropertyChanging();
				this._CustomerID = value;
				this.SendPropertyChanged("CustomerID");
				this.OnCustomerIDChanged();
			}
		}
	}
	
	[Column(Storage="_CustomerName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string CustomerName
	{
		get
		{
			return this._CustomerName;
		}
		set
		{
			if ((this._CustomerName != value))
			{
				this.OnCustomerNameChanging(value);
				this.SendPropertyChanging();
				this._CustomerName = value;
				this.SendPropertyChanged("CustomerName");
				this.OnCustomerNameChanged();
			}
		}
	}
	
	[Column(Storage="_Address", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[Column(Storage="_Email", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[Column(Storage="_Number", DbType="VarChar(20)")]
	public string Number
	{
		get
		{
			return this._Number;
		}
		set
		{
			if ((this._Number != value))
			{
				this.OnNumberChanging(value);
				this.SendPropertyChanging();
				this._Number = value;
				this.SendPropertyChanged("Number");
				this.OnNumberChanged();
			}
		}
	}
	
	[Association(Name="Customer_Order", Storage="_Orders", OtherKey="CustomerID")]
	public EntitySet<Order> Orders
	{
		get
		{
			return this._Orders;
		}
		set
		{
			this._Orders.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Orders(Order entity)
	{
		this.SendPropertyChanging();
		entity.Customer = this;
	}
	
	private void detach_Orders(Order entity)
	{
		this.SendPropertyChanging();
		entity.Customer = null;
	}
}

[Table(Name="dbo.Firms")]
public partial class Firm : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _FirmID;
	
	private string _FirmName;
	
	private string _Picture;
	
	private string _Description;
	
	private System.Nullable<int> _Status;
	
	private EntitySet<Phone> _Phones;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFirmIDChanging(string value);
    partial void OnFirmIDChanged();
    partial void OnFirmNameChanging(string value);
    partial void OnFirmNameChanged();
    partial void OnPictureChanging(string value);
    partial void OnPictureChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    #endregion
	
	public Firm()
	{
		this._Phones = new EntitySet<Phone>(new Action<Phone>(this.attach_Phones), new Action<Phone>(this.detach_Phones));
		OnCreated();
	}
	
	[Column(Storage="_FirmID", DbType="VarChar(3) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string FirmID
	{
		get
		{
			return this._FirmID;
		}
		set
		{
			if ((this._FirmID != value))
			{
				this.OnFirmIDChanging(value);
				this.SendPropertyChanging();
				this._FirmID = value;
				this.SendPropertyChanged("FirmID");
				this.OnFirmIDChanged();
			}
		}
	}
	
	[Column(Storage="_FirmName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string FirmName
	{
		get
		{
			return this._FirmName;
		}
		set
		{
			if ((this._FirmName != value))
			{
				this.OnFirmNameChanging(value);
				this.SendPropertyChanging();
				this._FirmName = value;
				this.SendPropertyChanged("FirmName");
				this.OnFirmNameChanged();
			}
		}
	}
	
	[Column(Storage="_Picture", DbType="VarChar(255)")]
	public string Picture
	{
		get
		{
			return this._Picture;
		}
		set
		{
			if ((this._Picture != value))
			{
				this.OnPictureChanging(value);
				this.SendPropertyChanging();
				this._Picture = value;
				this.SendPropertyChanged("Picture");
				this.OnPictureChanged();
			}
		}
	}
	
	[Column(Storage="_Description", DbType="NVarChar(500)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[Column(Storage="_Status", DbType="Int")]
	public System.Nullable<int> Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[Association(Name="Firm_Phone", Storage="_Phones", OtherKey="FirmID")]
	public EntitySet<Phone> Phones
	{
		get
		{
			return this._Phones;
		}
		set
		{
			this._Phones.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Phones(Phone entity)
	{
		this.SendPropertyChanging();
		entity.Firm = this;
	}
	
	private void detach_Phones(Phone entity)
	{
		this.SendPropertyChanging();
		entity.Firm = null;
	}
}

[Table(Name="dbo.Order_Details")]
public partial class Order_Detail : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _OrderID;
	
	private string _PhoneID;
	
	private int _Quantity;
	
	private double _SalePrice;
	
	private EntityRef<Order> _Order;
	
	private EntityRef<Phone> _Phone;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIDChanging(string value);
    partial void OnOrderIDChanged();
    partial void OnPhoneIDChanging(string value);
    partial void OnPhoneIDChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnSalePriceChanging(double value);
    partial void OnSalePriceChanged();
    #endregion
	
	public Order_Detail()
	{
		this._Order = default(EntityRef<Order>);
		this._Phone = default(EntityRef<Phone>);
		OnCreated();
	}
	
	[Column(Storage="_OrderID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string OrderID
	{
		get
		{
			return this._OrderID;
		}
		set
		{
			if ((this._OrderID != value))
			{
				if (this._Order.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnOrderIDChanging(value);
				this.SendPropertyChanging();
				this._OrderID = value;
				this.SendPropertyChanged("OrderID");
				this.OnOrderIDChanged();
			}
		}
	}
	
	[Column(Storage="_PhoneID", DbType="VarChar(8) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string PhoneID
	{
		get
		{
			return this._PhoneID;
		}
		set
		{
			if ((this._PhoneID != value))
			{
				if (this._Phone.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPhoneIDChanging(value);
				this.SendPropertyChanging();
				this._PhoneID = value;
				this.SendPropertyChanged("PhoneID");
				this.OnPhoneIDChanged();
			}
		}
	}
	
	[Column(Storage="_Quantity", DbType="Int NOT NULL")]
	public int Quantity
	{
		get
		{
			return this._Quantity;
		}
		set
		{
			if ((this._Quantity != value))
			{
				this.OnQuantityChanging(value);
				this.SendPropertyChanging();
				this._Quantity = value;
				this.SendPropertyChanged("Quantity");
				this.OnQuantityChanged();
			}
		}
	}
	
	[Column(Storage="_SalePrice", DbType="Float NOT NULL")]
	public double SalePrice
	{
		get
		{
			return this._SalePrice;
		}
		set
		{
			if ((this._SalePrice != value))
			{
				this.OnSalePriceChanging(value);
				this.SendPropertyChanging();
				this._SalePrice = value;
				this.SendPropertyChanged("SalePrice");
				this.OnSalePriceChanged();
			}
		}
	}
	
	[Association(Name="Order_Order_Detail", Storage="_Order", ThisKey="OrderID", IsForeignKey=true)]
	public Order Order
	{
		get
		{
			return this._Order.Entity;
		}
		set
		{
			Order previousValue = this._Order.Entity;
			if (((previousValue != value) 
						|| (this._Order.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Order.Entity = null;
					previousValue.Order_Details.Remove(this);
				}
				this._Order.Entity = value;
				if ((value != null))
				{
					value.Order_Details.Add(this);
					this._OrderID = value.OrderID;
				}
				else
				{
					this._OrderID = default(string);
				}
				this.SendPropertyChanged("Order");
			}
		}
	}
	
	[Association(Name="Phone_Order_Detail", Storage="_Phone", ThisKey="PhoneID", IsForeignKey=true)]
	public Phone Phone
	{
		get
		{
			return this._Phone.Entity;
		}
		set
		{
			Phone previousValue = this._Phone.Entity;
			if (((previousValue != value) 
						|| (this._Phone.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Phone.Entity = null;
					previousValue.Order_Details.Remove(this);
				}
				this._Phone.Entity = value;
				if ((value != null))
				{
					value.Order_Details.Add(this);
					this._PhoneID = value.PhoneID;
				}
				else
				{
					this._PhoneID = default(string);
				}
				this.SendPropertyChanged("Phone");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Orders")]
public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _OrderID;
	
	private string _CustomerID;
	
	private System.DateTime _OrderDate;
	
	private System.Nullable<System.DateTime> _RequireDate;
	
	private System.Nullable<System.DateTime> _ShippedDate;
	
	private string _ShipAddress;
	
	private System.Nullable<int> _Status;
	
	private System.Nullable<double> _Total;
	
	private string _Notes;
	
	private EntitySet<Order_Detail> _Order_Details;
	
	private EntityRef<Customer> _Customer;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIDChanging(string value);
    partial void OnOrderIDChanged();
    partial void OnCustomerIDChanging(string value);
    partial void OnCustomerIDChanged();
    partial void OnOrderDateChanging(System.DateTime value);
    partial void OnOrderDateChanged();
    partial void OnRequireDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRequireDateChanged();
    partial void OnShippedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnShippedDateChanged();
    partial void OnShipAddressChanging(string value);
    partial void OnShipAddressChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    partial void OnTotalChanging(System.Nullable<double> value);
    partial void OnTotalChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
	
	public Order()
	{
		this._Order_Details = new EntitySet<Order_Detail>(new Action<Order_Detail>(this.attach_Order_Details), new Action<Order_Detail>(this.detach_Order_Details));
		this._Customer = default(EntityRef<Customer>);
		OnCreated();
	}
	
	[Column(Storage="_OrderID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string OrderID
	{
		get
		{
			return this._OrderID;
		}
		set
		{
			if ((this._OrderID != value))
			{
				this.OnOrderIDChanging(value);
				this.SendPropertyChanging();
				this._OrderID = value;
				this.SendPropertyChanged("OrderID");
				this.OnOrderIDChanged();
			}
		}
	}
	
	[Column(Storage="_CustomerID", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
	public string CustomerID
	{
		get
		{
			return this._CustomerID;
		}
		set
		{
			if ((this._CustomerID != value))
			{
				if (this._Customer.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCustomerIDChanging(value);
				this.SendPropertyChanging();
				this._CustomerID = value;
				this.SendPropertyChanged("CustomerID");
				this.OnCustomerIDChanged();
			}
		}
	}
	
	[Column(Storage="_OrderDate", DbType="DateTime NOT NULL")]
	public System.DateTime OrderDate
	{
		get
		{
			return this._OrderDate;
		}
		set
		{
			if ((this._OrderDate != value))
			{
				this.OnOrderDateChanging(value);
				this.SendPropertyChanging();
				this._OrderDate = value;
				this.SendPropertyChanged("OrderDate");
				this.OnOrderDateChanged();
			}
		}
	}
	
	[Column(Storage="_RequireDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> RequireDate
	{
		get
		{
			return this._RequireDate;
		}
		set
		{
			if ((this._RequireDate != value))
			{
				this.OnRequireDateChanging(value);
				this.SendPropertyChanging();
				this._RequireDate = value;
				this.SendPropertyChanged("RequireDate");
				this.OnRequireDateChanged();
			}
		}
	}
	
	[Column(Storage="_ShippedDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> ShippedDate
	{
		get
		{
			return this._ShippedDate;
		}
		set
		{
			if ((this._ShippedDate != value))
			{
				this.OnShippedDateChanging(value);
				this.SendPropertyChanging();
				this._ShippedDate = value;
				this.SendPropertyChanged("ShippedDate");
				this.OnShippedDateChanged();
			}
		}
	}
	
	[Column(Storage="_ShipAddress", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
	public string ShipAddress
	{
		get
		{
			return this._ShipAddress;
		}
		set
		{
			if ((this._ShipAddress != value))
			{
				this.OnShipAddressChanging(value);
				this.SendPropertyChanging();
				this._ShipAddress = value;
				this.SendPropertyChanged("ShipAddress");
				this.OnShipAddressChanged();
			}
		}
	}
	
	[Column(Storage="_Status", DbType="Int")]
	public System.Nullable<int> Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[Column(Storage="_Total", DbType="Float")]
	public System.Nullable<double> Total
	{
		get
		{
			return this._Total;
		}
		set
		{
			if ((this._Total != value))
			{
				this.OnTotalChanging(value);
				this.SendPropertyChanging();
				this._Total = value;
				this.SendPropertyChanged("Total");
				this.OnTotalChanged();
			}
		}
	}
	
	[Column(Storage="_Notes", DbType="NVarChar(500)")]
	public string Notes
	{
		get
		{
			return this._Notes;
		}
		set
		{
			if ((this._Notes != value))
			{
				this.OnNotesChanging(value);
				this.SendPropertyChanging();
				this._Notes = value;
				this.SendPropertyChanged("Notes");
				this.OnNotesChanged();
			}
		}
	}
	
	[Association(Name="Order_Order_Detail", Storage="_Order_Details", OtherKey="OrderID")]
	public EntitySet<Order_Detail> Order_Details
	{
		get
		{
			return this._Order_Details;
		}
		set
		{
			this._Order_Details.Assign(value);
		}
	}
	
	[Association(Name="Customer_Order", Storage="_Customer", ThisKey="CustomerID", IsForeignKey=true)]
	public Customer Customer
	{
		get
		{
			return this._Customer.Entity;
		}
		set
		{
			Customer previousValue = this._Customer.Entity;
			if (((previousValue != value) 
						|| (this._Customer.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Customer.Entity = null;
					previousValue.Orders.Remove(this);
				}
				this._Customer.Entity = value;
				if ((value != null))
				{
					value.Orders.Add(this);
					this._CustomerID = value.CustomerID;
				}
				else
				{
					this._CustomerID = default(string);
				}
				this.SendPropertyChanged("Customer");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Order_Details(Order_Detail entity)
	{
		this.SendPropertyChanging();
		entity.Order = this;
	}
	
	private void detach_Order_Details(Order_Detail entity)
	{
		this.SendPropertyChanging();
		entity.Order = null;
	}
}

[Table(Name="dbo.Phones")]
public partial class Phone : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _PhoneID;
	
	private string _PhoneName;
	
	private string _FirmID;
	
	private string _Picture;
	
	private System.Nullable<System.DateTime> _ImportDate;
	
	private string _Quantity;
	
	private System.Nullable<double> _Price;
	
	private string _Warranty;
	
	private string _FamousInfomation;
	
	private System.Nullable<int> _Status;
	
	private string _Design;
	
	private string _Languages;
	
	private string _Sound;
	
	private string _Memory;
	
	private string _WebConnection;
	
	private string _Browsers;
	
	private string _Camera;
	
	private string _MusicPlayer;
	
	private string _MoviesPlayer;
	
	private string _Games;
	
	private string _OrtherInfomations;
	
	private string _Battery;
	
	private System.Nullable<int> _NumVisited;
	
	private EntitySet<Promotion> _Promotions;
	
	private EntitySet<Order_Detail> _Order_Details;
	
	private EntitySet<Poll> _Polls;
	
	private EntityRef<Firm> _Firm;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPhoneIDChanging(string value);
    partial void OnPhoneIDChanged();
    partial void OnPhoneNameChanging(string value);
    partial void OnPhoneNameChanged();
    partial void OnFirmIDChanging(string value);
    partial void OnFirmIDChanged();
    partial void OnPictureChanging(string value);
    partial void OnPictureChanged();
    partial void OnImportDateChanging(System.Nullable<System.DateTime> value);
    partial void OnImportDateChanged();
    partial void OnQuantityChanging(string value);
    partial void OnQuantityChanged();
    partial void OnPriceChanging(System.Nullable<double> value);
    partial void OnPriceChanged();
    partial void OnWarrantyChanging(string value);
    partial void OnWarrantyChanged();
    partial void OnFamousInfomationChanging(string value);
    partial void OnFamousInfomationChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    partial void OnDesignChanging(string value);
    partial void OnDesignChanged();
    partial void OnLanguagesChanging(string value);
    partial void OnLanguagesChanged();
    partial void OnSoundChanging(string value);
    partial void OnSoundChanged();
    partial void OnMemoryChanging(string value);
    partial void OnMemoryChanged();
    partial void OnWebConnectionChanging(string value);
    partial void OnWebConnectionChanged();
    partial void OnBrowsersChanging(string value);
    partial void OnBrowsersChanged();
    partial void OnCameraChanging(string value);
    partial void OnCameraChanged();
    partial void OnMusicPlayerChanging(string value);
    partial void OnMusicPlayerChanged();
    partial void OnMoviesPlayerChanging(string value);
    partial void OnMoviesPlayerChanged();
    partial void OnGamesChanging(string value);
    partial void OnGamesChanged();
    partial void OnOrtherInfomationsChanging(string value);
    partial void OnOrtherInfomationsChanged();
    partial void OnBatteryChanging(string value);
    partial void OnBatteryChanged();
    partial void OnNumVisitedChanging(System.Nullable<int> value);
    partial void OnNumVisitedChanged();
    #endregion
	
	public Phone()
	{
		this._Promotions = new EntitySet<Promotion>(new Action<Promotion>(this.attach_Promotions), new Action<Promotion>(this.detach_Promotions));
		this._Order_Details = new EntitySet<Order_Detail>(new Action<Order_Detail>(this.attach_Order_Details), new Action<Order_Detail>(this.detach_Order_Details));
		this._Polls = new EntitySet<Poll>(new Action<Poll>(this.attach_Polls), new Action<Poll>(this.detach_Polls));
		this._Firm = default(EntityRef<Firm>);
		OnCreated();
	}
	
	[Column(Storage="_PhoneID", DbType="VarChar(8) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string PhoneID
	{
		get
		{
			return this._PhoneID;
		}
		set
		{
			if ((this._PhoneID != value))
			{
				this.OnPhoneIDChanging(value);
				this.SendPropertyChanging();
				this._PhoneID = value;
				this.SendPropertyChanged("PhoneID");
				this.OnPhoneIDChanged();
			}
		}
	}
	
	[Column(Storage="_PhoneName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string PhoneName
	{
		get
		{
			return this._PhoneName;
		}
		set
		{
			if ((this._PhoneName != value))
			{
				this.OnPhoneNameChanging(value);
				this.SendPropertyChanging();
				this._PhoneName = value;
				this.SendPropertyChanged("PhoneName");
				this.OnPhoneNameChanged();
			}
		}
	}
	
	[Column(Storage="_FirmID", DbType="VarChar(3) NOT NULL", CanBeNull=false)]
	public string FirmID
	{
		get
		{
			return this._FirmID;
		}
		set
		{
			if ((this._FirmID != value))
			{
				if (this._Firm.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnFirmIDChanging(value);
				this.SendPropertyChanging();
				this._FirmID = value;
				this.SendPropertyChanged("FirmID");
				this.OnFirmIDChanged();
			}
		}
	}
	
	[Column(Storage="_Picture", DbType="VarChar(255)")]
	public string Picture
	{
		get
		{
			return this._Picture;
		}
		set
		{
			if ((this._Picture != value))
			{
				this.OnPictureChanging(value);
				this.SendPropertyChanging();
				this._Picture = value;
				this.SendPropertyChanged("Picture");
				this.OnPictureChanged();
			}
		}
	}
	
	[Column(Storage="_ImportDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> ImportDate
	{
		get
		{
			return this._ImportDate;
		}
		set
		{
			if ((this._ImportDate != value))
			{
				this.OnImportDateChanging(value);
				this.SendPropertyChanging();
				this._ImportDate = value;
				this.SendPropertyChanged("ImportDate");
				this.OnImportDateChanged();
			}
		}
	}
	
	[Column(Storage="_Quantity", DbType="NVarChar(50)")]
	public string Quantity
	{
		get
		{
			return this._Quantity;
		}
		set
		{
			if ((this._Quantity != value))
			{
				this.OnQuantityChanging(value);
				this.SendPropertyChanging();
				this._Quantity = value;
				this.SendPropertyChanged("Quantity");
				this.OnQuantityChanged();
			}
		}
	}
	
	[Column(Storage="_Price", DbType="Float")]
	public System.Nullable<double> Price
	{
		get
		{
			return this._Price;
		}
		set
		{
			if ((this._Price != value))
			{
				this.OnPriceChanging(value);
				this.SendPropertyChanging();
				this._Price = value;
				this.SendPropertyChanged("Price");
				this.OnPriceChanged();
			}
		}
	}
	
	[Column(Storage="_Warranty", DbType="NVarChar(50)")]
	public string Warranty
	{
		get
		{
			return this._Warranty;
		}
		set
		{
			if ((this._Warranty != value))
			{
				this.OnWarrantyChanging(value);
				this.SendPropertyChanging();
				this._Warranty = value;
				this.SendPropertyChanged("Warranty");
				this.OnWarrantyChanged();
			}
		}
	}
	
	[Column(Storage="_FamousInfomation", DbType="NVarChar(MAX)")]
	public string FamousInfomation
	{
		get
		{
			return this._FamousInfomation;
		}
		set
		{
			if ((this._FamousInfomation != value))
			{
				this.OnFamousInfomationChanging(value);
				this.SendPropertyChanging();
				this._FamousInfomation = value;
				this.SendPropertyChanged("FamousInfomation");
				this.OnFamousInfomationChanged();
			}
		}
	}
	
	[Column(Storage="_Status", DbType="Int")]
	public System.Nullable<int> Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[Column(Storage="_Design", DbType="NVarChar(1000)")]
	public string Design
	{
		get
		{
			return this._Design;
		}
		set
		{
			if ((this._Design != value))
			{
				this.OnDesignChanging(value);
				this.SendPropertyChanging();
				this._Design = value;
				this.SendPropertyChanged("Design");
				this.OnDesignChanged();
			}
		}
	}
	
	[Column(Storage="_Languages", DbType="NVarChar(250)")]
	public string Languages
	{
		get
		{
			return this._Languages;
		}
		set
		{
			if ((this._Languages != value))
			{
				this.OnLanguagesChanging(value);
				this.SendPropertyChanging();
				this._Languages = value;
				this.SendPropertyChanged("Languages");
				this.OnLanguagesChanged();
			}
		}
	}
	
	[Column(Storage="_Sound", DbType="NVarChar(500)")]
	public string Sound
	{
		get
		{
			return this._Sound;
		}
		set
		{
			if ((this._Sound != value))
			{
				this.OnSoundChanging(value);
				this.SendPropertyChanging();
				this._Sound = value;
				this.SendPropertyChanged("Sound");
				this.OnSoundChanged();
			}
		}
	}
	
	[Column(Storage="_Memory", DbType="NVarChar(500)")]
	public string Memory
	{
		get
		{
			return this._Memory;
		}
		set
		{
			if ((this._Memory != value))
			{
				this.OnMemoryChanging(value);
				this.SendPropertyChanging();
				this._Memory = value;
				this.SendPropertyChanged("Memory");
				this.OnMemoryChanged();
			}
		}
	}
	
	[Column(Storage="_WebConnection", DbType="NVarChar(1000)")]
	public string WebConnection
	{
		get
		{
			return this._WebConnection;
		}
		set
		{
			if ((this._WebConnection != value))
			{
				this.OnWebConnectionChanging(value);
				this.SendPropertyChanging();
				this._WebConnection = value;
				this.SendPropertyChanged("WebConnection");
				this.OnWebConnectionChanged();
			}
		}
	}
	
	[Column(Storage="_Browsers", DbType="NVarChar(400)")]
	public string Browsers
	{
		get
		{
			return this._Browsers;
		}
		set
		{
			if ((this._Browsers != value))
			{
				this.OnBrowsersChanging(value);
				this.SendPropertyChanging();
				this._Browsers = value;
				this.SendPropertyChanged("Browsers");
				this.OnBrowsersChanged();
			}
		}
	}
	
	[Column(Storage="_Camera", DbType="NVarChar(500)")]
	public string Camera
	{
		get
		{
			return this._Camera;
		}
		set
		{
			if ((this._Camera != value))
			{
				this.OnCameraChanging(value);
				this.SendPropertyChanging();
				this._Camera = value;
				this.SendPropertyChanged("Camera");
				this.OnCameraChanged();
			}
		}
	}
	
	[Column(Storage="_MusicPlayer", DbType="NVarChar(500)")]
	public string MusicPlayer
	{
		get
		{
			return this._MusicPlayer;
		}
		set
		{
			if ((this._MusicPlayer != value))
			{
				this.OnMusicPlayerChanging(value);
				this.SendPropertyChanging();
				this._MusicPlayer = value;
				this.SendPropertyChanged("MusicPlayer");
				this.OnMusicPlayerChanged();
			}
		}
	}
	
	[Column(Storage="_MoviesPlayer", DbType="NVarChar(500)")]
	public string MoviesPlayer
	{
		get
		{
			return this._MoviesPlayer;
		}
		set
		{
			if ((this._MoviesPlayer != value))
			{
				this.OnMoviesPlayerChanging(value);
				this.SendPropertyChanging();
				this._MoviesPlayer = value;
				this.SendPropertyChanged("MoviesPlayer");
				this.OnMoviesPlayerChanged();
			}
		}
	}
	
	[Column(Storage="_Games", DbType="NVarChar(350)")]
	public string Games
	{
		get
		{
			return this._Games;
		}
		set
		{
			if ((this._Games != value))
			{
				this.OnGamesChanging(value);
				this.SendPropertyChanging();
				this._Games = value;
				this.SendPropertyChanged("Games");
				this.OnGamesChanged();
			}
		}
	}
	
	[Column(Storage="_OrtherInfomations", DbType="NVarChar(4000)")]
	public string OrtherInfomations
	{
		get
		{
			return this._OrtherInfomations;
		}
		set
		{
			if ((this._OrtherInfomations != value))
			{
				this.OnOrtherInfomationsChanging(value);
				this.SendPropertyChanging();
				this._OrtherInfomations = value;
				this.SendPropertyChanged("OrtherInfomations");
				this.OnOrtherInfomationsChanged();
			}
		}
	}
	
	[Column(Storage="_Battery", DbType="NVarChar(500)")]
	public string Battery
	{
		get
		{
			return this._Battery;
		}
		set
		{
			if ((this._Battery != value))
			{
				this.OnBatteryChanging(value);
				this.SendPropertyChanging();
				this._Battery = value;
				this.SendPropertyChanged("Battery");
				this.OnBatteryChanged();
			}
		}
	}
	
	[Column(Storage="_NumVisited", DbType="Int")]
	public System.Nullable<int> NumVisited
	{
		get
		{
			return this._NumVisited;
		}
		set
		{
			if ((this._NumVisited != value))
			{
				this.OnNumVisitedChanging(value);
				this.SendPropertyChanging();
				this._NumVisited = value;
				this.SendPropertyChanged("NumVisited");
				this.OnNumVisitedChanged();
			}
		}
	}
	
	[Association(Name="Phone_Promotion", Storage="_Promotions", OtherKey="PhoneID")]
	public EntitySet<Promotion> Promotions
	{
		get
		{
			return this._Promotions;
		}
		set
		{
			this._Promotions.Assign(value);
		}
	}
	
	[Association(Name="Phone_Order_Detail", Storage="_Order_Details", OtherKey="PhoneID")]
	public EntitySet<Order_Detail> Order_Details
	{
		get
		{
			return this._Order_Details;
		}
		set
		{
			this._Order_Details.Assign(value);
		}
	}
	
	[Association(Name="Phone_Poll", Storage="_Polls", OtherKey="PhoneID")]
	public EntitySet<Poll> Polls
	{
		get
		{
			return this._Polls;
		}
		set
		{
			this._Polls.Assign(value);
		}
	}
	
	[Association(Name="Firm_Phone", Storage="_Firm", ThisKey="FirmID", IsForeignKey=true)]
	public Firm Firm
	{
		get
		{
			return this._Firm.Entity;
		}
		set
		{
			Firm previousValue = this._Firm.Entity;
			if (((previousValue != value) 
						|| (this._Firm.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Firm.Entity = null;
					previousValue.Phones.Remove(this);
				}
				this._Firm.Entity = value;
				if ((value != null))
				{
					value.Phones.Add(this);
					this._FirmID = value.FirmID;
				}
				else
				{
					this._FirmID = default(string);
				}
				this.SendPropertyChanged("Firm");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Promotions(Promotion entity)
	{
		this.SendPropertyChanging();
		entity.Phone = this;
	}
	
	private void detach_Promotions(Promotion entity)
	{
		this.SendPropertyChanging();
		entity.Phone = null;
	}
	
	private void attach_Order_Details(Order_Detail entity)
	{
		this.SendPropertyChanging();
		entity.Phone = this;
	}
	
	private void detach_Order_Details(Order_Detail entity)
	{
		this.SendPropertyChanging();
		entity.Phone = null;
	}
	
	private void attach_Polls(Poll entity)
	{
		this.SendPropertyChanging();
		entity.Phone = this;
	}
	
	private void detach_Polls(Poll entity)
	{
		this.SendPropertyChanging();
		entity.Phone = null;
	}
}

[Table(Name="dbo.Polls")]
public partial class Poll : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _PollID;
	
	private string _PhoneID;
	
	private string _Commentator;
	
	private string _Email;
	
	private System.Nullable<System.DateTime> _PostDate;
	
	private string _Comments;
	
	private System.Nullable<int> _VoteCount;
	
	private EntityRef<Phone> _Phone;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPollIDChanging(string value);
    partial void OnPollIDChanged();
    partial void OnPhoneIDChanging(string value);
    partial void OnPhoneIDChanged();
    partial void OnCommentatorChanging(string value);
    partial void OnCommentatorChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPostDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPostDateChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnVoteCountChanging(System.Nullable<int> value);
    partial void OnVoteCountChanged();
    #endregion
	
	public Poll()
	{
		this._Phone = default(EntityRef<Phone>);
		OnCreated();
	}
	
	[Column(Storage="_PollID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string PollID
	{
		get
		{
			return this._PollID;
		}
		set
		{
			if ((this._PollID != value))
			{
				this.OnPollIDChanging(value);
				this.SendPropertyChanging();
				this._PollID = value;
				this.SendPropertyChanged("PollID");
				this.OnPollIDChanged();
			}
		}
	}
	
	[Column(Storage="_PhoneID", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
	public string PhoneID
	{
		get
		{
			return this._PhoneID;
		}
		set
		{
			if ((this._PhoneID != value))
			{
				if (this._Phone.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPhoneIDChanging(value);
				this.SendPropertyChanging();
				this._PhoneID = value;
				this.SendPropertyChanged("PhoneID");
				this.OnPhoneIDChanged();
			}
		}
	}
	
	[Column(Storage="_Commentator", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Commentator
	{
		get
		{
			return this._Commentator;
		}
		set
		{
			if ((this._Commentator != value))
			{
				this.OnCommentatorChanging(value);
				this.SendPropertyChanging();
				this._Commentator = value;
				this.SendPropertyChanged("Commentator");
				this.OnCommentatorChanged();
			}
		}
	}
	
	[Column(Storage="_Email", DbType="VarChar(250)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[Column(Storage="_PostDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> PostDate
	{
		get
		{
			return this._PostDate;
		}
		set
		{
			if ((this._PostDate != value))
			{
				this.OnPostDateChanging(value);
				this.SendPropertyChanging();
				this._PostDate = value;
				this.SendPropertyChanged("PostDate");
				this.OnPostDateChanged();
			}
		}
	}
	
	[Column(Storage="_Comments", DbType="NVarChar(MAX)")]
	public string Comments
	{
		get
		{
			return this._Comments;
		}
		set
		{
			if ((this._Comments != value))
			{
				this.OnCommentsChanging(value);
				this.SendPropertyChanging();
				this._Comments = value;
				this.SendPropertyChanged("Comments");
				this.OnCommentsChanged();
			}
		}
	}
	
	[Column(Storage="_VoteCount", DbType="Int")]
	public System.Nullable<int> VoteCount
	{
		get
		{
			return this._VoteCount;
		}
		set
		{
			if ((this._VoteCount != value))
			{
				this.OnVoteCountChanging(value);
				this.SendPropertyChanging();
				this._VoteCount = value;
				this.SendPropertyChanged("VoteCount");
				this.OnVoteCountChanged();
			}
		}
	}
	
	[Association(Name="Phone_Poll", Storage="_Phone", ThisKey="PhoneID", IsForeignKey=true)]
	public Phone Phone
	{
		get
		{
			return this._Phone.Entity;
		}
		set
		{
			Phone previousValue = this._Phone.Entity;
			if (((previousValue != value) 
						|| (this._Phone.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Phone.Entity = null;
					previousValue.Polls.Remove(this);
				}
				this._Phone.Entity = value;
				if ((value != null))
				{
					value.Polls.Add(this);
					this._PhoneID = value.PhoneID;
				}
				else
				{
					this._PhoneID = default(string);
				}
				this.SendPropertyChanged("Phone");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

public partial class AdvancedSearchResult
{
	
	private string _FamousInfomation;
	
	private string _PhoneName;
	
	private string _Picture;
	
	private System.Nullable<double> _Price;
	
	public AdvancedSearchResult()
	{
	}
	
	[Column(Storage="_FamousInfomation", DbType="NVarChar(MAX)")]
	public string FamousInfomation
	{
		get
		{
			return this._FamousInfomation;
		}
		set
		{
			if ((this._FamousInfomation != value))
			{
				this._FamousInfomation = value;
			}
		}
	}
	
	[Column(Storage="_PhoneName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string PhoneName
	{
		get
		{
			return this._PhoneName;
		}
		set
		{
			if ((this._PhoneName != value))
			{
				this._PhoneName = value;
			}
		}
	}
	
	[Column(Storage="_Picture", DbType="VarChar(255)")]
	public string Picture
	{
		get
		{
			return this._Picture;
		}
		set
		{
			if ((this._Picture != value))
			{
				this._Picture = value;
			}
		}
	}
	
	[Column(Storage="_Price", DbType="Float")]
	public System.Nullable<double> Price
	{
		get
		{
			return this._Price;
		}
		set
		{
			if ((this._Price != value))
			{
				this._Price = value;
			}
		}
	}
}

public partial class DisplayBannerResult
{
	
	private string _BannerID;
	
	private string _BannerName;
	
	private string _Picture;
	
	private string _Link;
	
	private System.DateTime _PostDate;
	
	private string _Location;
	
	private System.Nullable<int> _Status;
	
	public DisplayBannerResult()
	{
	}
	
	[Column(Storage="_BannerID", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
	public string BannerID
	{
		get
		{
			return this._BannerID;
		}
		set
		{
			if ((this._BannerID != value))
			{
				this._BannerID = value;
			}
		}
	}
	
	[Column(Storage="_BannerName", DbType="NVarChar(100)")]
	public string BannerName
	{
		get
		{
			return this._BannerName;
		}
		set
		{
			if ((this._BannerName != value))
			{
				this._BannerName = value;
			}
		}
	}
	
	[Column(Storage="_Picture", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
	public string Picture
	{
		get
		{
			return this._Picture;
		}
		set
		{
			if ((this._Picture != value))
			{
				this._Picture = value;
			}
		}
	}
	
	[Column(Storage="_Link", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
	public string Link
	{
		get
		{
			return this._Link;
		}
		set
		{
			if ((this._Link != value))
			{
				this._Link = value;
			}
		}
	}
	
	[Column(Storage="_PostDate", DbType="DateTime NOT NULL")]
	public System.DateTime PostDate
	{
		get
		{
			return this._PostDate;
		}
		set
		{
			if ((this._PostDate != value))
			{
				this._PostDate = value;
			}
		}
	}
	
	[Column(Storage="_Location", DbType="VarChar(50)")]
	public string Location
	{
		get
		{
			return this._Location;
		}
		set
		{
			if ((this._Location != value))
			{
				this._Location = value;
			}
		}
	}
	
	[Column(Storage="_Status", DbType="Int")]
	public System.Nullable<int> Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this._Status = value;
			}
		}
	}
}

public partial class DisPlayFavouriteProductResult
{
	
	private string _PhoneID;
	
	private string _PhoneName;
	
	private string _Picture;
	
	private System.Nullable<double> _Price;
	
	public DisPlayFavouriteProductResult()
	{
	}
	
	[Column(Storage="_PhoneID", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
	public string PhoneID
	{
		get
		{
			return this._PhoneID;
		}
		set
		{
			if ((this._PhoneID != value))
			{
				this._PhoneID = value;
			}
		}
	}
	
	[Column(Storage="_PhoneName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string PhoneName
	{
		get
		{
			return this._PhoneName;
		}
		set
		{
			if ((this._PhoneName != value))
			{
				this._PhoneName = value;
			}
		}
	}
	
	[Column(Storage="_Picture", DbType="VarChar(255)")]
	public string Picture
	{
		get
		{
			return this._Picture;
		}
		set
		{
			if ((this._Picture != value))
			{
				this._Picture = value;
			}
		}
	}
	
	[Column(Storage="_Price", DbType="Float")]
	public System.Nullable<double> Price
	{
		get
		{
			return this._Price;
		}
		set
		{
			if ((this._Price != value))
			{
				this._Price = value;
			}
		}
	}
}

public partial class DisplaymMarketableProductResult
{
	
	private string _PhoneID;
	
	private string _PhoneName;
	
	private string _Picture;
	
	private System.Nullable<double> _Price;
	
	public DisplaymMarketableProductResult()
	{
	}
	
	[Column(Storage="_PhoneID", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
	public string PhoneID
	{
		get
		{
			return this._PhoneID;
		}
		set
		{
			if ((this._PhoneID != value))
			{
				this._PhoneID = value;
			}
		}
	}
	
	[Column(Storage="_PhoneName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string PhoneName
	{
		get
		{
			return this._PhoneName;
		}
		set
		{
			if ((this._PhoneName != value))
			{
				this._PhoneName = value;
			}
		}
	}
	
	[Column(Storage="_Picture", DbType="VarChar(255)")]
	public string Picture
	{
		get
		{
			return this._Picture;
		}
		set
		{
			if ((this._Picture != value))
			{
				this._Picture = value;
			}
		}
	}
	
	[Column(Storage="_Price", DbType="Float")]
	public System.Nullable<double> Price
	{
		get
		{
			return this._Price;
		}
		set
		{
			if ((this._Price != value))
			{
				this._Price = value;
			}
		}
	}
}

public partial class DisplayNewProductResult
{
	
	private string _PhoneID;
	
	private string _PhoneName;
	
	private string _Picture;
	
	private System.Nullable<double> _Price;
	
	public DisplayNewProductResult()
	{
	}
	
	[Column(Storage="_PhoneID", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
	public string PhoneID
	{
		get
		{
			return this._PhoneID;
		}
		set
		{
			if ((this._PhoneID != value))
			{
				this._PhoneID = value;
			}
		}
	}
	
	[Column(Storage="_PhoneName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string PhoneName
	{
		get
		{
			return this._PhoneName;
		}
		set
		{
			if ((this._PhoneName != value))
			{
				this._PhoneName = value;
			}
		}
	}
	
	[Column(Storage="_Picture", DbType="VarChar(255)")]
	public string Picture
	{
		get
		{
			return this._Picture;
		}
		set
		{
			if ((this._Picture != value))
			{
				this._Picture = value;
			}
		}
	}
	
	[Column(Storage="_Price", DbType="Float")]
	public System.Nullable<double> Price
	{
		get
		{
			return this._Price;
		}
		set
		{
			if ((this._Price != value))
			{
				this._Price = value;
			}
		}
	}
}

public partial class DisplayOrderbyDateResult
{
	
	private string _PhoneName;
	
	private string _OrderID;
	
	private string _CustomerName;
	
	private string _ShipAddress;
	
	private double _SalePrice;
	
	private int _Quantity;
	
	private System.Nullable<double> _Amount;
	
	public DisplayOrderbyDateResult()
	{
	}
	
	[Column(Storage="_PhoneName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string PhoneName
	{
		get
		{
			return this._PhoneName;
		}
		set
		{
			if ((this._PhoneName != value))
			{
				this._PhoneName = value;
			}
		}
	}
	
	[Column(Storage="_OrderID", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
	public string OrderID
	{
		get
		{
			return this._OrderID;
		}
		set
		{
			if ((this._OrderID != value))
			{
				this._OrderID = value;
			}
		}
	}
	
	[Column(Storage="_CustomerName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string CustomerName
	{
		get
		{
			return this._CustomerName;
		}
		set
		{
			if ((this._CustomerName != value))
			{
				this._CustomerName = value;
			}
		}
	}
	
	[Column(Storage="_ShipAddress", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
	public string ShipAddress
	{
		get
		{
			return this._ShipAddress;
		}
		set
		{
			if ((this._ShipAddress != value))
			{
				this._ShipAddress = value;
			}
		}
	}
	
	[Column(Storage="_SalePrice", DbType="Float NOT NULL")]
	public double SalePrice
	{
		get
		{
			return this._SalePrice;
		}
		set
		{
			if ((this._SalePrice != value))
			{
				this._SalePrice = value;
			}
		}
	}
	
	[Column(Storage="_Quantity", DbType="Int NOT NULL")]
	public int Quantity
	{
		get
		{
			return this._Quantity;
		}
		set
		{
			if ((this._Quantity != value))
			{
				this._Quantity = value;
			}
		}
	}
	
	[Column(Storage="_Amount", DbType="Float")]
	public System.Nullable<double> Amount
	{
		get
		{
			return this._Amount;
		}
		set
		{
			if ((this._Amount != value))
			{
				this._Amount = value;
			}
		}
	}
}

public partial class DisplayPollperPhoneResult
{
	
	private System.Nullable<long> _rowindex;
	
	private string _Commentator;
	
	private string _Email;
	
	private System.Nullable<System.DateTime> _PostDate;
	
	private System.Nullable<int> _VoteCount;
	
	private string _Comments;
	
	public DisplayPollperPhoneResult()
	{
	}
	
	[Column(Storage="_rowindex", DbType="BigInt")]
	public System.Nullable<long> rowindex
	{
		get
		{
			return this._rowindex;
		}
		set
		{
			if ((this._rowindex != value))
			{
				this._rowindex = value;
			}
		}
	}
	
	[Column(Storage="_Commentator", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Commentator
	{
		get
		{
			return this._Commentator;
		}
		set
		{
			if ((this._Commentator != value))
			{
				this._Commentator = value;
			}
		}
	}
	
	[Column(Storage="_Email", DbType="VarChar(250)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this._Email = value;
			}
		}
	}
	
	[Column(Storage="_PostDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> PostDate
	{
		get
		{
			return this._PostDate;
		}
		set
		{
			if ((this._PostDate != value))
			{
				this._PostDate = value;
			}
		}
	}
	
	[Column(Storage="_VoteCount", DbType="Int")]
	public System.Nullable<int> VoteCount
	{
		get
		{
			return this._VoteCount;
		}
		set
		{
			if ((this._VoteCount != value))
			{
				this._VoteCount = value;
			}
		}
	}
	
	[Column(Storage="_Comments", DbType="NVarChar(MAX)")]
	public string Comments
	{
		get
		{
			return this._Comments;
		}
		set
		{
			if ((this._Comments != value))
			{
				this._Comments = value;
			}
		}
	}
}

public partial class DisplayProductDetailResult
{
	
	private string _PhoneName;
	
	private string _FirmName;
	
	private string _Picture;
	
	private string _Quantity;
	
	private System.Nullable<double> _Price;
	
	private string _Warranty;
	
	private string _FamousInfomation;
	
	private string _Design;
	
	private string _Languages;
	
	private string _Sound;
	
	private string _Memory;
	
	private string _WebConnection;
	
	private string _Browsers;
	
	private string _Camera;
	
	private string _MusicPlayer;
	
	private string _MoviesPlayer;
	
	private string _Games;
	
	private string _OrtherInfomations;
	
	private string _Battery;
	
	public DisplayProductDetailResult()
	{
	}
	
	[Column(Storage="_PhoneName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string PhoneName
	{
		get
		{
			return this._PhoneName;
		}
		set
		{
			if ((this._PhoneName != value))
			{
				this._PhoneName = value;
			}
		}
	}
	
	[Column(Storage="_FirmName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string FirmName
	{
		get
		{
			return this._FirmName;
		}
		set
		{
			if ((this._FirmName != value))
			{
				this._FirmName = value;
			}
		}
	}
	
	[Column(Storage="_Picture", DbType="VarChar(255)")]
	public string Picture
	{
		get
		{
			return this._Picture;
		}
		set
		{
			if ((this._Picture != value))
			{
				this._Picture = value;
			}
		}
	}
	
	[Column(Storage="_Quantity", DbType="NVarChar(50)")]
	public string Quantity
	{
		get
		{
			return this._Quantity;
		}
		set
		{
			if ((this._Quantity != value))
			{
				this._Quantity = value;
			}
		}
	}
	
	[Column(Storage="_Price", DbType="Float")]
	public System.Nullable<double> Price
	{
		get
		{
			return this._Price;
		}
		set
		{
			if ((this._Price != value))
			{
				this._Price = value;
			}
		}
	}
	
	[Column(Storage="_Warranty", DbType="NVarChar(50)")]
	public string Warranty
	{
		get
		{
			return this._Warranty;
		}
		set
		{
			if ((this._Warranty != value))
			{
				this._Warranty = value;
			}
		}
	}
	
	[Column(Storage="_FamousInfomation", DbType="NVarChar(MAX)")]
	public string FamousInfomation
	{
		get
		{
			return this._FamousInfomation;
		}
		set
		{
			if ((this._FamousInfomation != value))
			{
				this._FamousInfomation = value;
			}
		}
	}
	
	[Column(Storage="_Design", DbType="NVarChar(1000)")]
	public string Design
	{
		get
		{
			return this._Design;
		}
		set
		{
			if ((this._Design != value))
			{
				this._Design = value;
			}
		}
	}
	
	[Column(Storage="_Languages", DbType="NVarChar(250)")]
	public string Languages
	{
		get
		{
			return this._Languages;
		}
		set
		{
			if ((this._Languages != value))
			{
				this._Languages = value;
			}
		}
	}
	
	[Column(Storage="_Sound", DbType="NVarChar(500)")]
	public string Sound
	{
		get
		{
			return this._Sound;
		}
		set
		{
			if ((this._Sound != value))
			{
				this._Sound = value;
			}
		}
	}
	
	[Column(Storage="_Memory", DbType="NVarChar(500)")]
	public string Memory
	{
		get
		{
			return this._Memory;
		}
		set
		{
			if ((this._Memory != value))
			{
				this._Memory = value;
			}
		}
	}
	
	[Column(Storage="_WebConnection", DbType="NVarChar(1000)")]
	public string WebConnection
	{
		get
		{
			return this._WebConnection;
		}
		set
		{
			if ((this._WebConnection != value))
			{
				this._WebConnection = value;
			}
		}
	}
	
	[Column(Storage="_Browsers", DbType="NVarChar(400)")]
	public string Browsers
	{
		get
		{
			return this._Browsers;
		}
		set
		{
			if ((this._Browsers != value))
			{
				this._Browsers = value;
			}
		}
	}
	
	[Column(Storage="_Camera", DbType="NVarChar(500)")]
	public string Camera
	{
		get
		{
			return this._Camera;
		}
		set
		{
			if ((this._Camera != value))
			{
				this._Camera = value;
			}
		}
	}
	
	[Column(Storage="_MusicPlayer", DbType="NVarChar(500)")]
	public string MusicPlayer
	{
		get
		{
			return this._MusicPlayer;
		}
		set
		{
			if ((this._MusicPlayer != value))
			{
				this._MusicPlayer = value;
			}
		}
	}
	
	[Column(Storage="_MoviesPlayer", DbType="NVarChar(500)")]
	public string MoviesPlayer
	{
		get
		{
			return this._MoviesPlayer;
		}
		set
		{
			if ((this._MoviesPlayer != value))
			{
				this._MoviesPlayer = value;
			}
		}
	}
	
	[Column(Storage="_Games", DbType="NVarChar(350)")]
	public string Games
	{
		get
		{
			return this._Games;
		}
		set
		{
			if ((this._Games != value))
			{
				this._Games = value;
			}
		}
	}
	
	[Column(Storage="_OrtherInfomations", DbType="NVarChar(4000)")]
	public string OrtherInfomations
	{
		get
		{
			return this._OrtherInfomations;
		}
		set
		{
			if ((this._OrtherInfomations != value))
			{
				this._OrtherInfomations = value;
			}
		}
	}
	
	[Column(Storage="_Battery", DbType="NVarChar(500)")]
	public string Battery
	{
		get
		{
			return this._Battery;
		}
		set
		{
			if ((this._Battery != value))
			{
				this._Battery = value;
			}
		}
	}
}

public partial class GetSameProductsResult
{
	
	private System.Nullable<long> _rowindex;
	
	private string _PhoneName;
	
	private string _Picture;
	
	private System.Nullable<double> _Price;
	
	public GetSameProductsResult()
	{
	}
	
	[Column(Storage="_rowindex", DbType="BigInt")]
	public System.Nullable<long> rowindex
	{
		get
		{
			return this._rowindex;
		}
		set
		{
			if ((this._rowindex != value))
			{
				this._rowindex = value;
			}
		}
	}
	
	[Column(Storage="_PhoneName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string PhoneName
	{
		get
		{
			return this._PhoneName;
		}
		set
		{
			if ((this._PhoneName != value))
			{
				this._PhoneName = value;
			}
		}
	}
	
	[Column(Storage="_Picture", DbType="VarChar(255)")]
	public string Picture
	{
		get
		{
			return this._Picture;
		}
		set
		{
			if ((this._Picture != value))
			{
				this._Picture = value;
			}
		}
	}
	
	[Column(Storage="_Price", DbType="Float")]
	public System.Nullable<double> Price
	{
		get
		{
			return this._Price;
		}
		set
		{
			if ((this._Price != value))
			{
				this._Price = value;
			}
		}
	}
}

public partial class SearchByNameResult
{
	
	private System.Nullable<long> _rowindex;
	
	private string _PhoneName;
	
	private string _Picture;
	
	private System.Nullable<double> _Price;
	
	public SearchByNameResult()
	{
	}
	
	[Column(Storage="_rowindex", DbType="BigInt")]
	public System.Nullable<long> rowindex
	{
		get
		{
			return this._rowindex;
		}
		set
		{
			if ((this._rowindex != value))
			{
				this._rowindex = value;
			}
		}
	}
	
	[Column(Storage="_PhoneName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string PhoneName
	{
		get
		{
			return this._PhoneName;
		}
		set
		{
			if ((this._PhoneName != value))
			{
				this._PhoneName = value;
			}
		}
	}
	
	[Column(Storage="_Picture", DbType="VarChar(255)")]
	public string Picture
	{
		get
		{
			return this._Picture;
		}
		set
		{
			if ((this._Picture != value))
			{
				this._Picture = value;
			}
		}
	}
	
	[Column(Storage="_Price", DbType="Float")]
	public System.Nullable<double> Price
	{
		get
		{
			return this._Price;
		}
		set
		{
			if ((this._Price != value))
			{
				this._Price = value;
			}
		}
	}
}

public partial class SearchByPriceResult
{
	
	private System.Nullable<long> _rowindex;
	
	private string _PhoneName;
	
	private string _Picture;
	
	private System.Nullable<double> _Price;
	
	public SearchByPriceResult()
	{
	}
	
	[Column(Storage="_rowindex", DbType="BigInt")]
	public System.Nullable<long> rowindex
	{
		get
		{
			return this._rowindex;
		}
		set
		{
			if ((this._rowindex != value))
			{
				this._rowindex = value;
			}
		}
	}
	
	[Column(Storage="_PhoneName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string PhoneName
	{
		get
		{
			return this._PhoneName;
		}
		set
		{
			if ((this._PhoneName != value))
			{
				this._PhoneName = value;
			}
		}
	}
	
	[Column(Storage="_Picture", DbType="VarChar(255)")]
	public string Picture
	{
		get
		{
			return this._Picture;
		}
		set
		{
			if ((this._Picture != value))
			{
				this._Picture = value;
			}
		}
	}
	
	[Column(Storage="_Price", DbType="Float")]
	public System.Nullable<double> Price
	{
		get
		{
			return this._Price;
		}
		set
		{
			if ((this._Price != value))
			{
				this._Price = value;
			}
		}
	}
}

public partial class SearchCustomerByAddressResult
{
	
	private string _CustomerID;
	
	private string _CustomerName;
	
	private string _Address;
	
	private string _Email;
	
	private string _Number;
	
	public SearchCustomerByAddressResult()
	{
	}
	
	[Column(Storage="_CustomerID", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
	public string CustomerID
	{
		get
		{
			return this._CustomerID;
		}
		set
		{
			if ((this._CustomerID != value))
			{
				this._CustomerID = value;
			}
		}
	}
	
	[Column(Storage="_CustomerName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string CustomerName
	{
		get
		{
			return this._CustomerName;
		}
		set
		{
			if ((this._CustomerName != value))
			{
				this._CustomerName = value;
			}
		}
	}
	
	[Column(Storage="_Address", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this._Address = value;
			}
		}
	}
	
	[Column(Storage="_Email", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this._Email = value;
			}
		}
	}
	
	[Column(Storage="_Number", DbType="VarChar(20)")]
	public string Number
	{
		get
		{
			return this._Number;
		}
		set
		{
			if ((this._Number != value))
			{
				this._Number = value;
			}
		}
	}
}

public partial class SearchCustomerByNameResult
{
	
	private string _CustomerID;
	
	private string _CustomerName;
	
	private string _Address;
	
	private string _Email;
	
	private string _Number;
	
	public SearchCustomerByNameResult()
	{
	}
	
	[Column(Storage="_CustomerID", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
	public string CustomerID
	{
		get
		{
			return this._CustomerID;
		}
		set
		{
			if ((this._CustomerID != value))
			{
				this._CustomerID = value;
			}
		}
	}
	
	[Column(Storage="_CustomerName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string CustomerName
	{
		get
		{
			return this._CustomerName;
		}
		set
		{
			if ((this._CustomerName != value))
			{
				this._CustomerName = value;
			}
		}
	}
	
	[Column(Storage="_Address", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this._Address = value;
			}
		}
	}
	
	[Column(Storage="_Email", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this._Email = value;
			}
		}
	}
	
	[Column(Storage="_Number", DbType="VarChar(20)")]
	public string Number
	{
		get
		{
			return this._Number;
		}
		set
		{
			if ((this._Number != value))
			{
				this._Number = value;
			}
		}
	}
}

public partial class SearchFirmByNameResult
{
	
	private string _FirmID;
	
	private string _FirmName;
	
	private string _Picture;
	
	private string _Description;
	
	private System.Nullable<int> _Status;
	
	public SearchFirmByNameResult()
	{
	}
	
	[Column(Storage="_FirmID", DbType="VarChar(3) NOT NULL", CanBeNull=false)]
	public string FirmID
	{
		get
		{
			return this._FirmID;
		}
		set
		{
			if ((this._FirmID != value))
			{
				this._FirmID = value;
			}
		}
	}
	
	[Column(Storage="_FirmName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string FirmName
	{
		get
		{
			return this._FirmName;
		}
		set
		{
			if ((this._FirmName != value))
			{
				this._FirmName = value;
			}
		}
	}
	
	[Column(Storage="_Picture", DbType="VarChar(255)")]
	public string Picture
	{
		get
		{
			return this._Picture;
		}
		set
		{
			if ((this._Picture != value))
			{
				this._Picture = value;
			}
		}
	}
	
	[Column(Storage="_Description", DbType="NVarChar(500)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this._Description = value;
			}
		}
	}
	
	[Column(Storage="_Status", DbType="Int")]
	public System.Nullable<int> Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this._Status = value;
			}
		}
	}
}

public partial class SearchByFirmResult
{
	
	private System.Nullable<long> _rowindex;
	
	private string _PhoneID;
	
	private string _PhoneName;
	
	private string _Picture;
	
	private System.Nullable<double> _Price;
	
	private string _FirmID;
	
	public SearchByFirmResult()
	{
	}
	
	[Column(Storage="_rowindex", DbType="BigInt")]
	public System.Nullable<long> rowindex
	{
		get
		{
			return this._rowindex;
		}
		set
		{
			if ((this._rowindex != value))
			{
				this._rowindex = value;
			}
		}
	}
	
	[Column(Storage="_PhoneID", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
	public string PhoneID
	{
		get
		{
			return this._PhoneID;
		}
		set
		{
			if ((this._PhoneID != value))
			{
				this._PhoneID = value;
			}
		}
	}
	
	[Column(Storage="_PhoneName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string PhoneName
	{
		get
		{
			return this._PhoneName;
		}
		set
		{
			if ((this._PhoneName != value))
			{
				this._PhoneName = value;
			}
		}
	}
	
	[Column(Storage="_Picture", DbType="VarChar(255)")]
	public string Picture
	{
		get
		{
			return this._Picture;
		}
		set
		{
			if ((this._Picture != value))
			{
				this._Picture = value;
			}
		}
	}
	
	[Column(Storage="_Price", DbType="Float")]
	public System.Nullable<double> Price
	{
		get
		{
			return this._Price;
		}
		set
		{
			if ((this._Price != value))
			{
				this._Price = value;
			}
		}
	}
	
	[Column(Storage="_FirmID", DbType="VarChar(3) NOT NULL", CanBeNull=false)]
	public string FirmID
	{
		get
		{
			return this._FirmID;
		}
		set
		{
			if ((this._FirmID != value))
			{
				this._FirmID = value;
			}
		}
	}
}
#pragma warning restore 1591
